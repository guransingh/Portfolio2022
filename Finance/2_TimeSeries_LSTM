{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "32ae17d7",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "32ae17d7",
        "outputId": "cd7a1c4b-beda-4511-cd51-40b94f6ced56"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: pmdarima in /usr/local/lib/python3.8/dist-packages (2.0.2)\n",
            "Requirement already satisfied: numpy>=1.21.2 in /usr/local/lib/python3.8/dist-packages (from pmdarima) (1.21.6)\n",
            "Requirement already satisfied: urllib3 in /usr/local/lib/python3.8/dist-packages (from pmdarima) (1.24.3)\n",
            "Requirement already satisfied: scikit-learn>=0.22 in /usr/local/lib/python3.8/dist-packages (from pmdarima) (1.0.2)\n",
            "Requirement already satisfied: statsmodels>=0.13.2 in /usr/local/lib/python3.8/dist-packages (from pmdarima) (0.13.5)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.8/dist-packages (from pmdarima) (1.2.0)\n",
            "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.8/dist-packages (from pmdarima) (1.7.3)\n",
            "Requirement already satisfied: setuptools!=50.0.0,>=38.6.0 in /usr/local/lib/python3.8/dist-packages (from pmdarima) (57.4.0)\n",
            "Requirement already satisfied: Cython!=0.29.18,!=0.29.31,>=0.29 in /usr/local/lib/python3.8/dist-packages (from pmdarima) (0.29.32)\n",
            "Requirement already satisfied: pandas>=0.19 in /usr/local/lib/python3.8/dist-packages (from pmdarima) (1.3.5)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.8/dist-packages (from pandas>=0.19->pmdarima) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.8/dist-packages (from pandas>=0.19->pmdarima) (2022.7)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.8/dist-packages (from scikit-learn>=0.22->pmdarima) (3.1.0)\n",
            "Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.8/dist-packages (from statsmodels>=0.13.2->pmdarima) (21.3)\n",
            "Requirement already satisfied: patsy>=0.5.2 in /usr/local/lib/python3.8/dist-packages (from statsmodels>=0.13.2->pmdarima) (0.5.3)\n",
            "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.8/dist-packages (from packaging>=21.3->statsmodels>=0.13.2->pmdarima) (3.0.9)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.8/dist-packages (from patsy>=0.5.2->statsmodels>=0.13.2->pmdarima) (1.15.0)\n"
          ]
        }
      ],
      "source": [
        "!pip install pmdarima\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.dates as mdates\n",
        "import seaborn as sns\n",
        "from datetime import datetime\n",
        "from statsmodels.tsa.stattools import adfuller\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import LSTM\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.layers import Flatten\n",
        "from tensorflow.keras.layers import Dropout\n",
        "import statsmodels\n",
        "\n",
        "import statsmodels.api as sm\n",
        "\n",
        "from statsmodels.graphics import tsaplots\n",
        "\n",
        "from statsmodels.tsa.arima.model import ARIMA\n",
        "\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "from pmdarima.arima import auto_arima"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "86e4ff7f",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "86e4ff7f",
        "outputId": "9a3e9b3a-cd31-487c-dd00-1871604af86f"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-1bb4fea9-40a9-4601-abee-d0e1a40cea7f\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-1bb4fea9-40a9-4601-abee-d0e1a40cea7f\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving ARIMAforecast.csv to ARIMAforecast.csv\n"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv('Dataset')"
      ],
      "metadata": {
        "id": "WbHFnWfhxgK9"
      },
      "id": "WbHFnWfhxgK9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arima=pd.read_csv('ARIMAforecast.csv')"
      ],
      "metadata": {
        "id": "s7bhteyTCvT3"
      },
      "id": "s7bhteyTCvT3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0f832d33",
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 228
        },
        "id": "0f832d33",
        "outputId": "6c512a7c-1515-4952-a650-6c34b91ea2db"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0  DGS30  DGS10  DGS2  UNRATE  BAMLH0A0HYM2  CSUSHPINSA  \\\n",
              "0  1914-01-01    NaN    NaN   NaN     NaN           NaN         NaN   \n",
              "1  1915-01-01    NaN    NaN   NaN     NaN           NaN         NaN   \n",
              "\n",
              "   MORTGAGE30US  SP500  NASDAQCOM  MSCIEM  MSCIEAFE  DJIA  RealGDP  \\\n",
              "0           NaN    NaN        NaN     NaN       NaN   NaN      NaN   \n",
              "1           NaN    NaN        NaN     NaN       NaN   NaN      NaN   \n",
              "\n",
              "   BAMLC0A3CA  USDXY  VIX  DGS5  FEDFUNDS  inflation  \n",
              "0         NaN    NaN  NaN   NaN       NaN        1.3  \n",
              "1         NaN    NaN  NaN   NaN       NaN        0.9  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8555facd-3540-494f-b524-0d21e654ac89\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>DGS30</th>\n",
              "      <th>DGS10</th>\n",
              "      <th>DGS2</th>\n",
              "      <th>UNRATE</th>\n",
              "      <th>BAMLH0A0HYM2</th>\n",
              "      <th>CSUSHPINSA</th>\n",
              "      <th>MORTGAGE30US</th>\n",
              "      <th>SP500</th>\n",
              "      <th>NASDAQCOM</th>\n",
              "      <th>MSCIEM</th>\n",
              "      <th>MSCIEAFE</th>\n",
              "      <th>DJIA</th>\n",
              "      <th>RealGDP</th>\n",
              "      <th>BAMLC0A3CA</th>\n",
              "      <th>USDXY</th>\n",
              "      <th>VIX</th>\n",
              "      <th>DGS5</th>\n",
              "      <th>FEDFUNDS</th>\n",
              "      <th>inflation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1914-01-01</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1915-01-01</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8555facd-3540-494f-b524-0d21e654ac89')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8555facd-3540-494f-b524-0d21e654ac89 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8555facd-3540-494f-b524-0d21e654ac89');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "plt.style.use('seaborn-whitegrid')\n",
        "plt.rcParams['figure.figsize']=16,8\n",
        "df.head(2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "326f5d83",
      "metadata": {
        "id": "326f5d83"
      },
      "outputs": [],
      "source": [
        "#convert index to datetime\n",
        "df.set_index('Unnamed: 0', inplace=True)\n",
        "df.index=pd.to_datetime(df.index)\n",
        "df.sort_index(inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "87fc4a63",
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "87fc4a63",
        "outputId": "55dab5d6-fbf1-47cb-d00d-4450269c362f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DatetimeIndex(['1914-01-01', '1915-01-01', '1916-01-01', '1917-01-01',\n",
              "               '1918-01-01', '1919-01-01', '1920-01-01', '1921-01-01',\n",
              "               '1922-01-01', '1923-01-01',\n",
              "               ...\n",
              "               '2022-11-09', '2022-11-10', '2022-11-11', '2022-11-14',\n",
              "               '2022-11-15', '2022-11-16', '2022-11-17', '2022-11-18',\n",
              "               '2022-11-21', '2022-11-22'],\n",
              "              dtype='datetime64[ns]', name='Unnamed: 0', length=16388, freq=None)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "df.index"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "23ada72d",
      "metadata": {
        "id": "23ada72d"
      },
      "outputs": [],
      "source": [
        "df=df.resample('D').last().ffill()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "06a80de3",
      "metadata": {
        "id": "06a80de3"
      },
      "outputs": [],
      "source": [
        "#df=df.set_index('index')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fcddbc14",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 406
        },
        "id": "fcddbc14",
        "outputId": "a631d190-0fb7-4afa-df00-26b648d4ecb3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            DGS30  DGS10  DGS2  UNRATE  BAMLH0A0HYM2  CSUSHPINSA  \\\n",
              "Unnamed: 0                                                         \n",
              "1914-01-01    NaN    NaN   NaN     NaN           NaN         NaN   \n",
              "1914-01-02    NaN    NaN   NaN     NaN           NaN         NaN   \n",
              "1914-01-03    NaN    NaN   NaN     NaN           NaN         NaN   \n",
              "1914-01-04    NaN    NaN   NaN     NaN           NaN         NaN   \n",
              "1914-01-05    NaN    NaN   NaN     NaN           NaN         NaN   \n",
              "\n",
              "            MORTGAGE30US  SP500  NASDAQCOM  MSCIEM  MSCIEAFE  DJIA  RealGDP  \\\n",
              "Unnamed: 0                                                                    \n",
              "1914-01-01           NaN    NaN        NaN     NaN       NaN   NaN      NaN   \n",
              "1914-01-02           NaN    NaN        NaN     NaN       NaN   NaN      NaN   \n",
              "1914-01-03           NaN    NaN        NaN     NaN       NaN   NaN      NaN   \n",
              "1914-01-04           NaN    NaN        NaN     NaN       NaN   NaN      NaN   \n",
              "1914-01-05           NaN    NaN        NaN     NaN       NaN   NaN      NaN   \n",
              "\n",
              "            BAMLC0A3CA  USDXY  VIX  DGS5  FEDFUNDS  inflation  \n",
              "Unnamed: 0                                                     \n",
              "1914-01-01         NaN    NaN  NaN   NaN       NaN        1.3  \n",
              "1914-01-02         NaN    NaN  NaN   NaN       NaN        1.3  \n",
              "1914-01-03         NaN    NaN  NaN   NaN       NaN        1.3  \n",
              "1914-01-04         NaN    NaN  NaN   NaN       NaN        1.3  \n",
              "1914-01-05         NaN    NaN  NaN   NaN       NaN        1.3  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dcc12167-e222-4b82-ae77-94bd3d14d3f1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DGS30</th>\n",
              "      <th>DGS10</th>\n",
              "      <th>DGS2</th>\n",
              "      <th>UNRATE</th>\n",
              "      <th>BAMLH0A0HYM2</th>\n",
              "      <th>CSUSHPINSA</th>\n",
              "      <th>MORTGAGE30US</th>\n",
              "      <th>SP500</th>\n",
              "      <th>NASDAQCOM</th>\n",
              "      <th>MSCIEM</th>\n",
              "      <th>MSCIEAFE</th>\n",
              "      <th>DJIA</th>\n",
              "      <th>RealGDP</th>\n",
              "      <th>BAMLC0A3CA</th>\n",
              "      <th>USDXY</th>\n",
              "      <th>VIX</th>\n",
              "      <th>DGS5</th>\n",
              "      <th>FEDFUNDS</th>\n",
              "      <th>inflation</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1914-01-01</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1914-01-02</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1914-01-03</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1914-01-04</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1914-01-05</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dcc12167-e222-4b82-ae77-94bd3d14d3f1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-dcc12167-e222-4b82-ae77-94bd3d14d3f1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-dcc12167-e222-4b82-ae77-94bd3d14d3f1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "abdf1184",
      "metadata": {
        "id": "abdf1184"
      },
      "outputs": [],
      "source": [
        "df = df.resample('M').last()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 260
        },
        "id": "sqrjzTeKyqRm",
        "outputId": "640747ac-ece6-4c0e-f92d-1f74280a9ac7"
      },
      "id": "sqrjzTeKyqRm",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            DGS30  DGS10  DGS2  UNRATE  BAMLH0A0HYM2  CSUSHPINSA  \\\n",
              "Unnamed: 0                                                         \n",
              "1914-01-31    NaN    NaN   NaN     NaN           NaN         NaN   \n",
              "1914-02-28    NaN    NaN   NaN     NaN           NaN         NaN   \n",
              "\n",
              "            MORTGAGE30US  SP500  NASDAQCOM  MSCIEM  MSCIEAFE  DJIA  RealGDP  \\\n",
              "Unnamed: 0                                                                    \n",
              "1914-01-31           NaN    NaN        NaN     NaN       NaN   NaN      NaN   \n",
              "1914-02-28           NaN    NaN        NaN     NaN       NaN   NaN      NaN   \n",
              "\n",
              "            BAMLC0A3CA  USDXY  VIX  DGS5  FEDFUNDS  inflation  \n",
              "Unnamed: 0                                                     \n",
              "1914-01-31         NaN    NaN  NaN   NaN       NaN        1.3  \n",
              "1914-02-28         NaN    NaN  NaN   NaN       NaN        1.3  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-43b72603-71a7-4c52-ad56-0d906b033bad\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DGS30</th>\n",
              "      <th>DGS10</th>\n",
              "      <th>DGS2</th>\n",
              "      <th>UNRATE</th>\n",
              "      <th>BAMLH0A0HYM2</th>\n",
              "      <th>CSUSHPINSA</th>\n",
              "      <th>MORTGAGE30US</th>\n",
              "      <th>SP500</th>\n",
              "      <th>NASDAQCOM</th>\n",
              "      <th>MSCIEM</th>\n",
              "      <th>MSCIEAFE</th>\n",
              "      <th>DJIA</th>\n",
              "      <th>RealGDP</th>\n",
              "      <th>BAMLC0A3CA</th>\n",
              "      <th>USDXY</th>\n",
              "      <th>VIX</th>\n",
              "      <th>DGS5</th>\n",
              "      <th>FEDFUNDS</th>\n",
              "      <th>inflation</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1914-01-31</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1914-02-28</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-43b72603-71a7-4c52-ad56-0d906b033bad')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-43b72603-71a7-4c52-ad56-0d906b033bad button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-43b72603-71a7-4c52-ad56-0d906b033bad');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fe7e45e4",
      "metadata": {
        "id": "fe7e45e4"
      },
      "outputs": [],
      "source": [
        "#pick the yield curve columns\n",
        "df=df[['DGS10']].iloc[:-2]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0face8ee",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0face8ee",
        "outputId": "264084bb-8bfe-4c3b-ee48-891b59d9a4df"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1305, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "#check shape\n",
        "df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "52025c93",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "52025c93",
        "outputId": "b6cdcaa5-f9b6-4002-ae46-361d838bc267"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            DGS10\n",
              "Unnamed: 0       \n",
              "1914-01-31    NaN\n",
              "1914-02-28    NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6f5d035f-8525-47df-b448-97d499b97cf1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DGS10</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1914-01-31</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1914-02-28</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6f5d035f-8525-47df-b448-97d499b97cf1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6f5d035f-8525-47df-b448-97d499b97cf1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6f5d035f-8525-47df-b448-97d499b97cf1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "df.head(2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a941d98b",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "a941d98b",
        "outputId": "32bba0b1-7c78-4c7f-92e7-9570d872dfe2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               DGS10\n",
              "Unnamed: 0          \n",
              "2017-10-31  2.380000\n",
              "2017-11-30  2.420000\n",
              "2017-12-31  2.420000\n",
              "2018-01-31  2.720000\n",
              "2018-02-28  2.870000\n",
              "2018-03-31  2.735000\n",
              "2018-04-30  2.950000\n",
              "2018-05-31  2.830000\n",
              "2018-06-30  2.856667\n",
              "2018-07-31  2.960000\n",
              "2018-08-31  2.860000\n",
              "2018-09-30  3.070000\n",
              "2018-10-31  3.150000\n",
              "2018-11-30  3.010000\n",
              "2018-12-31  2.690000\n",
              "2019-01-31  2.630000\n",
              "2019-02-28  2.730000\n",
              "2019-03-31  2.450000\n",
              "2019-04-30  2.510000\n",
              "2019-05-31  2.140000\n",
              "2019-06-30  2.015000\n",
              "2019-07-31  2.020000\n",
              "2019-08-31  1.492500\n",
              "2019-09-30  1.680000\n",
              "2019-10-31  1.690000\n",
              "2019-11-30  1.796667\n",
              "2019-12-31  1.920000\n",
              "2020-01-31  1.510000\n",
              "2020-02-29  1.120000\n",
              "2020-03-31  0.700000\n",
              "2020-04-30  0.640000\n",
              "2020-05-31  0.655000\n",
              "2020-06-30  0.660000\n",
              "2020-07-31  0.550000\n",
              "2020-08-31  0.720000\n",
              "2020-09-30  0.690000\n",
              "2020-10-31  0.876667\n",
              "2020-11-30  0.840000\n",
              "2020-12-31  0.930000\n",
              "2021-01-31  1.100000\n",
              "2021-02-28  1.445000\n",
              "2021-03-31  1.740000\n",
              "2021-04-30  1.650000\n",
              "2021-05-31  1.600000\n",
              "2021-06-30  1.450000\n",
              "2021-07-31  1.226667\n",
              "2021-08-31  1.300000\n",
              "2021-09-30  1.520000\n",
              "2021-10-31  1.565000\n",
              "2021-11-30  1.430000\n",
              "2021-12-31  1.520000\n",
              "2022-01-31  1.790000\n",
              "2022-02-28  1.830000\n",
              "2022-03-31  2.320000\n",
              "2022-04-30  2.923333\n",
              "2022-05-31  2.850000\n",
              "2022-06-30  2.980000\n",
              "2022-07-31  2.635000\n",
              "2022-08-31  3.150000\n",
              "2022-09-30  3.830000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-08fcd6f4-67e5-4fbd-9506-e248c55e9fce\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DGS10</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2017-10-31</th>\n",
              "      <td>2.380000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-11-30</th>\n",
              "      <td>2.420000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-12-31</th>\n",
              "      <td>2.420000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-31</th>\n",
              "      <td>2.720000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-02-28</th>\n",
              "      <td>2.870000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-03-31</th>\n",
              "      <td>2.735000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-04-30</th>\n",
              "      <td>2.950000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-05-31</th>\n",
              "      <td>2.830000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-06-30</th>\n",
              "      <td>2.856667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-07-31</th>\n",
              "      <td>2.960000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-08-31</th>\n",
              "      <td>2.860000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-09-30</th>\n",
              "      <td>3.070000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-10-31</th>\n",
              "      <td>3.150000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-11-30</th>\n",
              "      <td>3.010000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-12-31</th>\n",
              "      <td>2.690000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-31</th>\n",
              "      <td>2.630000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-28</th>\n",
              "      <td>2.730000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-03-31</th>\n",
              "      <td>2.450000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-04-30</th>\n",
              "      <td>2.510000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-05-31</th>\n",
              "      <td>2.140000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-06-30</th>\n",
              "      <td>2.015000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-31</th>\n",
              "      <td>2.020000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-08-31</th>\n",
              "      <td>1.492500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-09-30</th>\n",
              "      <td>1.680000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-10-31</th>\n",
              "      <td>1.690000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-11-30</th>\n",
              "      <td>1.796667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-12-31</th>\n",
              "      <td>1.920000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-01-31</th>\n",
              "      <td>1.510000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-02-29</th>\n",
              "      <td>1.120000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-03-31</th>\n",
              "      <td>0.700000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-04-30</th>\n",
              "      <td>0.640000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-05-31</th>\n",
              "      <td>0.655000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-06-30</th>\n",
              "      <td>0.660000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-07-31</th>\n",
              "      <td>0.550000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-08-31</th>\n",
              "      <td>0.720000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-09-30</th>\n",
              "      <td>0.690000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-10-31</th>\n",
              "      <td>0.876667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-11-30</th>\n",
              "      <td>0.840000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-12-31</th>\n",
              "      <td>0.930000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-01-31</th>\n",
              "      <td>1.100000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-02-28</th>\n",
              "      <td>1.445000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-03-31</th>\n",
              "      <td>1.740000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-04-30</th>\n",
              "      <td>1.650000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-05-31</th>\n",
              "      <td>1.600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-06-30</th>\n",
              "      <td>1.450000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-07-31</th>\n",
              "      <td>1.226667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-08-31</th>\n",
              "      <td>1.300000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-09-30</th>\n",
              "      <td>1.520000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-10-31</th>\n",
              "      <td>1.565000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-11-30</th>\n",
              "      <td>1.430000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-31</th>\n",
              "      <td>1.520000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-31</th>\n",
              "      <td>1.790000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-02-28</th>\n",
              "      <td>1.830000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-31</th>\n",
              "      <td>2.320000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-04-30</th>\n",
              "      <td>2.923333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-05-31</th>\n",
              "      <td>2.850000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-06-30</th>\n",
              "      <td>2.980000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-07-31</th>\n",
              "      <td>2.635000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-08-31</th>\n",
              "      <td>3.150000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-09-30</th>\n",
              "      <td>3.830000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-08fcd6f4-67e5-4fbd-9506-e248c55e9fce')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-08fcd6f4-67e5-4fbd-9506-e248c55e9fce button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-08fcd6f4-67e5-4fbd-9506-e248c55e9fce');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "#check head\n",
        "df.tail(60)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7853ae58",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7853ae58",
        "outputId": "4107b03b-ce81-422a-d7d6-82d2bc22490c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DGS10    0.441379\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "#count nulls as % of rows. Some very high % of missing data\n",
        "df.isnull().sum()/df.shape[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b9c47c59",
      "metadata": {
        "scrolled": true,
        "id": "b9c47c59"
      },
      "outputs": [],
      "source": [
        "#drop the NAs\n",
        "df.dropna(inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7292b28e",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "7292b28e",
        "outputId": "4acce650-c4bc-4b69-8b5c-293b827d5fc4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            DGS10\n",
              "Unnamed: 0       \n",
              "1962-01-31    4.1\n",
              "1962-02-28    4.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d8ac2382-2497-4468-a708-83cb3f5ad3c8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DGS10</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1962-01-31</th>\n",
              "      <td>4.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1962-02-28</th>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d8ac2382-2497-4468-a708-83cb3f5ad3c8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d8ac2382-2497-4468-a708-83cb3f5ad3c8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d8ac2382-2497-4468-a708-83cb3f5ad3c8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "#check head again\n",
        "df.head(2)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Pe_SdyfEGUSn",
        "outputId": "8ae99bf1-285b-4192-a473-1fa3e5a72929"
      },
      "id": "Pe_SdyfEGUSn",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(729, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "31751ff7",
      "metadata": {
        "id": "31751ff7"
      },
      "outputs": [],
      "source": [
        "#create ticks and labels on x axis for all graphs\n",
        "xticks= pd.date_range('1/1/1977', periods = 10, freq='5Y') \n",
        "xlabels=np.arange(1977,2022,5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2d46183d",
      "metadata": {
        "id": "2d46183d"
      },
      "outputs": [],
      "source": [
        "# print(xlabels)\n",
        "# print(xticks)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b715121a",
      "metadata": {
        "scrolled": false,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 522
        },
        "id": "b715121a",
        "outputId": "26f3e354-c20b-4e0b-c50f-0a92580393f3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Historical US Treasury Rates')"
            ]
          },
          "metadata": {},
          "execution_count": 138
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1152x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Plot the lines\n",
        "plt.plot(df.DGS10,label='10Y')\n",
        "plt.yticks(fontsize=15)\n",
        "plt.legend(fontsize=15)\n",
        "plt.xticks(fontsize=15)\n",
        "#plt.xticks(ticks=xticks, labels=xlabels,fontsize=15)\n",
        "plt.title('Historical US Treasury Rates',fontsize=20)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a519cdb8",
      "metadata": {
        "id": "a519cdb8"
      },
      "source": [
        "### X and Y preprocessing"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#choose number of timesteps in each record (in months)\n",
        "n_steps = 60"
      ],
      "metadata": {
        "id": "PTYgnbaXFZ5g"
      },
      "id": "PTYgnbaXFZ5g",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#define a function to preprocess the x and y variabls\n",
        "def prepare_data(timeseries_data, n_steps):\n",
        "  x,y=[],[]\n",
        "  for i in range(len(timeseries_data)):\n",
        "    end_ix=i+n_steps #find the end of this pattern\n",
        "    if end_ix>len(timeseries_data)-1: #if longer than timeseries, break the loop\n",
        "      break\n",
        "    #gather the input and output sequences\n",
        "    seq_x=timeseries_data[i:end_ix]\n",
        "    seq_y=timeseries_data[end_ix]\n",
        "    x.append(seq_x)\n",
        "    y.append(seq_y)\n",
        "  return(np.array(x), np.array(y))\n"
      ],
      "metadata": {
        "id": "ttG1jSUYFZ2t"
      },
      "id": "ttG1jSUYFZ2t",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x, y = prepare_data(np.array(df.DGS10),n_steps)"
      ],
      "metadata": {
        "id": "G05MqziVFZ0R"
      },
      "id": "G05MqziVFZ0R",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dUCh7NdFFZxv",
        "outputId": "f1a5e331-7c72-4d85-81b0-700bf93f035c"
      },
      "id": "dUCh7NdFFZxv",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(669, 60)"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s0HlLMPbFZvS",
        "outputId": "a7393e35-d455-4882-b537-b93713db2110"
      },
      "id": "s0HlLMPbFZvS",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(669,)"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x[1]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a8z6EAM8FZs2",
        "outputId": "6d51780d-af71-4208-e6e2-277b6f9690e7"
      },
      "id": "a8z6EAM8FZs2",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([4.  , 3.86, 3.86, 3.9 , 4.  , 4.04, 3.96, 3.94, 3.92, 3.92, 3.85,\n",
              "       3.87, 3.94, 3.95, 3.95, 3.96, 4.  , 4.  , 4.02, 4.07, 4.15, 4.08,\n",
              "       4.14, 4.15, 4.18, 4.23, 4.22, 4.19, 4.15, 4.19, 4.21, 4.18, 4.16,\n",
              "       4.2 , 4.21, 4.19, 4.22, 4.2 , 4.21, 4.23, 4.2 , 4.22, 4.27, 4.35,\n",
              "       4.41, 4.48, 4.65, 4.69, 5.02, 4.71, 4.79, 4.8 , 4.97, 5.05, 5.36,\n",
              "       5.02, 4.97, 5.12, 4.64, 4.52])"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y[668]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y5pN6gcNFZqD",
        "outputId": "7336786e-27c8-42ce-91f3-36b16a5b43c3"
      },
      "id": "y5pN6gcNFZqD",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.83"
            ]
          },
          "metadata": {},
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x[2]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zydeIuGjFZc1",
        "outputId": "bafab689-a5a4-46c2-def3-fdb5e8ef79dd"
      },
      "id": "zydeIuGjFZc1",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([3.86, 3.86, 3.9 , 4.  , 4.04, 3.96, 3.94, 3.92, 3.92, 3.85, 3.87,\n",
              "       3.94, 3.95, 3.95, 3.96, 4.  , 4.  , 4.02, 4.07, 4.15, 4.08, 4.14,\n",
              "       4.15, 4.18, 4.23, 4.22, 4.19, 4.15, 4.19, 4.21, 4.18, 4.16, 4.2 ,\n",
              "       4.21, 4.19, 4.22, 4.2 , 4.21, 4.23, 4.2 , 4.22, 4.27, 4.35, 4.41,\n",
              "       4.48, 4.65, 4.69, 5.02, 4.71, 4.79, 4.8 , 4.97, 5.05, 5.36, 5.02,\n",
              "       4.97, 5.12, 4.64, 4.52, 4.72])"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y[2]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xfpLSEvPJdGk",
        "outputId": "d56f691d-c200-4a0d-a7c4-1188a718446e"
      },
      "id": "xfpLSEvPJdGk",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4.5"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x[3]"
      ],
      "metadata": {
        "id": "DZ7lWwRHJey0",
        "outputId": "9448f677-fd64-4e12-b98c-76c0c6fdf47d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "id": "DZ7lWwRHJey0",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([3.86, 3.9 , 4.  , 4.04, 3.96, 3.94, 3.92, 3.92, 3.85, 3.87, 3.94,\n",
              "       3.95, 3.95, 3.96, 4.  , 4.  , 4.02, 4.07, 4.15, 4.08, 4.14, 4.15,\n",
              "       4.18, 4.23, 4.22, 4.19, 4.15, 4.19, 4.21, 4.18, 4.16, 4.2 , 4.21,\n",
              "       4.19, 4.22, 4.2 , 4.21, 4.23, 4.2 , 4.22, 4.27, 4.35, 4.41, 4.48,\n",
              "       4.65, 4.69, 5.02, 4.71, 4.79, 4.8 , 4.97, 5.05, 5.36, 5.02, 4.97,\n",
              "       5.12, 4.64, 4.52, 4.72, 4.5 ])"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#reshape data into 3-dim as that is the input into LSTM\n",
        "#FROM (# records, # of features/timesteps) TO (# of records, # of features/timesteps in each record, # to output (usually 1))\n",
        "n_features=1 #this the # of values to output\n",
        "x=x.reshape((x.shape[0],x.shape[1],n_features))"
      ],
      "metadata": {
        "id": "ORN8jbW_C2cw"
      },
      "id": "ORN8jbW_C2cw",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PvbFJy48C2ai",
        "outputId": "8742d94c-0a97-4c74-8632-f2a9db682cf5"
      },
      "id": "PvbFJy48C2ai",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(669, 60, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Building the LSTM Model"
      ],
      "metadata": {
        "id": "yeOrg-JrDluL"
      },
      "id": "yeOrg-JrDluL"
    },
    {
      "cell_type": "code",
      "source": [
        "#initiate the model\n",
        "model = Sequential() #initiate the model\n",
        "#Add input layer with 50 neurons\n",
        "model.add(LSTM(50, activation='relu', return_sequences=True, input_shape=(n_steps,n_features)))\n",
        "#Add second layer with 50 neurons\n",
        "model.add(LSTM(50, activation='relu'))\n",
        "#Add a fully connected output layer with 1 output\n",
        "model.add(Dense(1))\n",
        "#compile the model\n",
        "model.compile(optimizer='adam', loss='mse')"
      ],
      "metadata": {
        "id": "aPQ9OC6cC2YM"
      },
      "id": "aPQ9OC6cC2YM",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#fit the model\n",
        "model.fit(x,y, epochs = 300, verbose=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zkp7OvqGC2Vp",
        "outputId": "f49dc9fe-8280-4ecb-e956-1f39f1a09797"
      },
      "id": "zkp7OvqGC2Vp",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/300\n",
            "21/21 [==============================] - 2s 89ms/step - loss: 14.7674\n",
            "Epoch 2/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 14.7442\n",
            "Epoch 3/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 14.7225\n",
            "Epoch 4/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 14.7000\n",
            "Epoch 5/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 14.6776\n",
            "Epoch 6/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 14.6515\n",
            "Epoch 7/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 14.6256\n",
            "Epoch 8/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 14.6017\n",
            "Epoch 9/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 14.5766\n",
            "Epoch 10/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 14.5531\n",
            "Epoch 11/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 14.5265\n",
            "Epoch 12/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 14.5025\n",
            "Epoch 13/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 14.4797\n",
            "Epoch 14/300\n",
            "21/21 [==============================] - 1s 58ms/step - loss: 14.4491\n",
            "Epoch 15/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 14.4224\n",
            "Epoch 16/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 14.3947\n",
            "Epoch 17/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 14.3702\n",
            "Epoch 18/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 14.3441\n",
            "Epoch 19/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 14.3121\n",
            "Epoch 20/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 14.2878\n",
            "Epoch 21/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 14.2540\n",
            "Epoch 22/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 14.2260\n",
            "Epoch 23/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 14.1980\n",
            "Epoch 24/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 14.1656\n",
            "Epoch 25/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 14.1353\n",
            "Epoch 26/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 14.1051\n",
            "Epoch 27/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 14.0755\n",
            "Epoch 28/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 14.0399\n",
            "Epoch 29/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 14.0098\n",
            "Epoch 30/300\n",
            "21/21 [==============================] - 1s 58ms/step - loss: 13.9751\n",
            "Epoch 31/300\n",
            "21/21 [==============================] - 1s 58ms/step - loss: 13.9414\n",
            "Epoch 32/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 13.9072\n",
            "Epoch 33/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 13.8735\n",
            "Epoch 34/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 13.8367\n",
            "Epoch 35/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 13.8004\n",
            "Epoch 36/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 13.7635\n",
            "Epoch 37/300\n",
            "21/21 [==============================] - 1s 58ms/step - loss: 13.7269\n",
            "Epoch 38/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 13.6876\n",
            "Epoch 39/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 13.6467\n",
            "Epoch 40/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 13.6058\n",
            "Epoch 41/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 13.5657\n",
            "Epoch 42/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 13.5237\n",
            "Epoch 43/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 13.4775\n",
            "Epoch 44/300\n",
            "21/21 [==============================] - 1s 58ms/step - loss: 13.4379\n",
            "Epoch 45/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 13.3856\n",
            "Epoch 46/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 13.3374\n",
            "Epoch 47/300\n",
            "21/21 [==============================] - 1s 58ms/step - loss: 13.2850\n",
            "Epoch 48/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 13.2283\n",
            "Epoch 49/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 13.1690\n",
            "Epoch 50/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 13.1056\n",
            "Epoch 51/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 13.0281\n",
            "Epoch 52/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 12.9398\n",
            "Epoch 53/300\n",
            "21/21 [==============================] - 1s 67ms/step - loss: 12.8287\n",
            "Epoch 54/300\n",
            "21/21 [==============================] - 2s 100ms/step - loss: 12.4249\n",
            "Epoch 55/300\n",
            "21/21 [==============================] - 2s 99ms/step - loss: 11.8949\n",
            "Epoch 56/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 11.6440\n",
            "Epoch 57/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 11.3290\n",
            "Epoch 58/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 10.9152\n",
            "Epoch 59/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 10.5312\n",
            "Epoch 60/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 10.1101\n",
            "Epoch 61/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 9.6844\n",
            "Epoch 62/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 8.9932\n",
            "Epoch 63/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 7.7765\n",
            "Epoch 64/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 7.3700\n",
            "Epoch 65/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 6.7744\n",
            "Epoch 66/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 6.1738\n",
            "Epoch 67/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 6.1323\n",
            "Epoch 68/300\n",
            "21/21 [==============================] - 1s 71ms/step - loss: 5.4336\n",
            "Epoch 69/300\n",
            "21/21 [==============================] - 1s 65ms/step - loss: 4.7983\n",
            "Epoch 70/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 4.4398\n",
            "Epoch 71/300\n",
            "21/21 [==============================] - 1s 58ms/step - loss: 3.9769\n",
            "Epoch 72/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 3.4394\n",
            "Epoch 73/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 3.1862\n",
            "Epoch 74/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 3.0469\n",
            "Epoch 75/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 3.0075\n",
            "Epoch 76/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 2.9343\n",
            "Epoch 77/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 2.8740\n",
            "Epoch 78/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.8046\n",
            "Epoch 79/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.7498\n",
            "Epoch 80/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 2.6937\n",
            "Epoch 81/300\n",
            "21/21 [==============================] - 2s 87ms/step - loss: 2.6075\n",
            "Epoch 82/300\n",
            "21/21 [==============================] - 2s 95ms/step - loss: 2.5635\n",
            "Epoch 83/300\n",
            "21/21 [==============================] - 2s 79ms/step - loss: 2.5366\n",
            "Epoch 84/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.4257\n",
            "Epoch 85/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 2.3833\n",
            "Epoch 86/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 2.3800\n",
            "Epoch 87/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.3513\n",
            "Epoch 88/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 2.3658\n",
            "Epoch 89/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.3171\n",
            "Epoch 90/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.3140\n",
            "Epoch 91/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 2.3271\n",
            "Epoch 92/300\n",
            "21/21 [==============================] - 1s 58ms/step - loss: 2.2867\n",
            "Epoch 93/300\n",
            "21/21 [==============================] - 1s 58ms/step - loss: 2.2707\n",
            "Epoch 94/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.2753\n",
            "Epoch 95/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 2.3005\n",
            "Epoch 96/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.2879\n",
            "Epoch 97/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.2483\n",
            "Epoch 98/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 2.2301\n",
            "Epoch 99/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 2.2257\n",
            "Epoch 100/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 2.2285\n",
            "Epoch 101/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 2.2204\n",
            "Epoch 102/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.1943\n",
            "Epoch 103/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 2.1854\n",
            "Epoch 104/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.1768\n",
            "Epoch 105/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.1721\n",
            "Epoch 106/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.1614\n",
            "Epoch 107/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 2.1497\n",
            "Epoch 108/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.1402\n",
            "Epoch 109/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 2.1488\n",
            "Epoch 110/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 2.1218\n",
            "Epoch 111/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 2.1046\n",
            "Epoch 112/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.1307\n",
            "Epoch 113/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 2.0974\n",
            "Epoch 114/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.1034\n",
            "Epoch 115/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 2.1010\n",
            "Epoch 116/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.0866\n",
            "Epoch 117/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 2.0797\n",
            "Epoch 118/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 2.0653\n",
            "Epoch 119/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.0884\n",
            "Epoch 120/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.0485\n",
            "Epoch 121/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 2.0385\n",
            "Epoch 122/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 2.0251\n",
            "Epoch 123/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.0125\n",
            "Epoch 124/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.0186\n",
            "Epoch 125/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.9971\n",
            "Epoch 126/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 1.9869\n",
            "Epoch 127/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.9787\n",
            "Epoch 128/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.9698\n",
            "Epoch 129/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.9606\n",
            "Epoch 130/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.9513\n",
            "Epoch 131/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.9347\n",
            "Epoch 132/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 1.8999\n",
            "Epoch 133/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 1.8714\n",
            "Epoch 134/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.8546\n",
            "Epoch 135/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.8455\n",
            "Epoch 136/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.8174\n",
            "Epoch 137/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.7873\n",
            "Epoch 138/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 1.8092\n",
            "Epoch 139/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.8007\n",
            "Epoch 140/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 1.7585\n",
            "Epoch 141/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 1.7359\n",
            "Epoch 142/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 1.7278\n",
            "Epoch 143/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.7037\n",
            "Epoch 144/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.6793\n",
            "Epoch 145/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.7014\n",
            "Epoch 146/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 1.6881\n",
            "Epoch 147/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 1.6620\n",
            "Epoch 148/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.6339\n",
            "Epoch 149/300\n",
            "21/21 [==============================] - 1s 58ms/step - loss: 1.6752\n",
            "Epoch 150/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.7433\n",
            "Epoch 151/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.6530\n",
            "Epoch 152/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 1.6305\n",
            "Epoch 153/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 1.6398\n",
            "Epoch 154/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.6003\n",
            "Epoch 155/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 1.5287\n",
            "Epoch 156/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 1.5119\n",
            "Epoch 157/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.5102\n",
            "Epoch 158/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.4353\n",
            "Epoch 159/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.4085\n",
            "Epoch 160/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 1.3855\n",
            "Epoch 161/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 1.3318\n",
            "Epoch 162/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 1.2973\n",
            "Epoch 163/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.2952\n",
            "Epoch 164/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 1.3961\n",
            "Epoch 165/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 1.2524\n",
            "Epoch 166/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 1.2523\n",
            "Epoch 167/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.1857\n",
            "Epoch 168/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 1.1519\n",
            "Epoch 169/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 1.0936\n",
            "Epoch 170/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 1.0089\n",
            "Epoch 171/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 0.9349\n",
            "Epoch 172/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.9571\n",
            "Epoch 173/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.9257\n",
            "Epoch 174/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.8817\n",
            "Epoch 175/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.8815\n",
            "Epoch 176/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.7890\n",
            "Epoch 177/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.7428\n",
            "Epoch 178/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.7221\n",
            "Epoch 179/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.7698\n",
            "Epoch 180/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.7273\n",
            "Epoch 181/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.6918\n",
            "Epoch 182/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.6462\n",
            "Epoch 183/300\n",
            "21/21 [==============================] - 1s 65ms/step - loss: 0.7197\n",
            "Epoch 184/300\n",
            "21/21 [==============================] - 2s 100ms/step - loss: 0.6504\n",
            "Epoch 185/300\n",
            "21/21 [==============================] - 2s 100ms/step - loss: 0.5532\n",
            "Epoch 186/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.5955\n",
            "Epoch 187/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.5050\n",
            "Epoch 188/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.4687\n",
            "Epoch 189/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.4836\n",
            "Epoch 190/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.5064\n",
            "Epoch 191/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.4406\n",
            "Epoch 192/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 0.4511\n",
            "Epoch 193/300\n",
            "21/21 [==============================] - 1s 58ms/step - loss: 0.4349\n",
            "Epoch 194/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.4260\n",
            "Epoch 195/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.4444\n",
            "Epoch 196/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.6401\n",
            "Epoch 197/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.3894\n",
            "Epoch 198/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.4111\n",
            "Epoch 199/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.4116\n",
            "Epoch 200/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.3790\n",
            "Epoch 201/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.3803\n",
            "Epoch 202/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.4185\n",
            "Epoch 203/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.4171\n",
            "Epoch 204/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.3802\n",
            "Epoch 205/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.3508\n",
            "Epoch 206/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.3280\n",
            "Epoch 207/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.3214\n",
            "Epoch 208/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.3247\n",
            "Epoch 209/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.3301\n",
            "Epoch 210/300\n",
            "21/21 [==============================] - 2s 76ms/step - loss: 0.3268\n",
            "Epoch 211/300\n",
            "21/21 [==============================] - 2s 99ms/step - loss: 0.3038\n",
            "Epoch 212/300\n",
            "21/21 [==============================] - 2s 89ms/step - loss: 0.3316\n",
            "Epoch 213/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.3256\n",
            "Epoch 214/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.3051\n",
            "Epoch 215/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.3311\n",
            "Epoch 216/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.2932\n",
            "Epoch 217/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.2996\n",
            "Epoch 218/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.2853\n",
            "Epoch 219/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.2761\n",
            "Epoch 220/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.2635\n",
            "Epoch 221/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.2820\n",
            "Epoch 222/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.2910\n",
            "Epoch 223/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.2959\n",
            "Epoch 224/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.3318\n",
            "Epoch 225/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.3359\n",
            "Epoch 226/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.3261\n",
            "Epoch 227/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.2701\n",
            "Epoch 228/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.2796\n",
            "Epoch 229/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.2731\n",
            "Epoch 230/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.2602\n",
            "Epoch 231/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.3079\n",
            "Epoch 232/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.3067\n",
            "Epoch 233/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.2466\n",
            "Epoch 234/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.2751\n",
            "Epoch 235/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.2599\n",
            "Epoch 236/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.2475\n",
            "Epoch 237/300\n",
            "21/21 [==============================] - 1s 65ms/step - loss: 0.2684\n",
            "Epoch 238/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.2514\n",
            "Epoch 239/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.2414\n",
            "Epoch 240/300\n",
            "21/21 [==============================] - 1s 66ms/step - loss: 0.2522\n",
            "Epoch 241/300\n",
            "21/21 [==============================] - 1s 69ms/step - loss: 0.2441\n",
            "Epoch 242/300\n",
            "21/21 [==============================] - 1s 67ms/step - loss: 0.2403\n",
            "Epoch 243/300\n",
            "21/21 [==============================] - 1s 68ms/step - loss: 0.2719\n",
            "Epoch 244/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.2572\n",
            "Epoch 245/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.2404\n",
            "Epoch 246/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.2899\n",
            "Epoch 247/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.2369\n",
            "Epoch 248/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.2457\n",
            "Epoch 249/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.2517\n",
            "Epoch 250/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.2582\n",
            "Epoch 251/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.2389\n",
            "Epoch 252/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.2305\n",
            "Epoch 253/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.2261\n",
            "Epoch 254/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.2464\n",
            "Epoch 255/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.2152\n",
            "Epoch 256/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.2004\n",
            "Epoch 257/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.2426\n",
            "Epoch 258/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.2401\n",
            "Epoch 259/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.2046\n",
            "Epoch 260/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.1987\n",
            "Epoch 261/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.2009\n",
            "Epoch 262/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.2045\n",
            "Epoch 263/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.2033\n",
            "Epoch 264/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.2212\n",
            "Epoch 265/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.2193\n",
            "Epoch 266/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.2392\n",
            "Epoch 267/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.2147\n",
            "Epoch 268/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.2089\n",
            "Epoch 269/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.1935\n",
            "Epoch 270/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.1928\n",
            "Epoch 271/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.1934\n",
            "Epoch 272/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.2051\n",
            "Epoch 273/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.1816\n",
            "Epoch 274/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.1979\n",
            "Epoch 275/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.2042\n",
            "Epoch 276/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.2058\n",
            "Epoch 277/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.2107\n",
            "Epoch 278/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.1980\n",
            "Epoch 279/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.2827\n",
            "Epoch 280/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.2550\n",
            "Epoch 281/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 0.1982\n",
            "Epoch 282/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.1999\n",
            "Epoch 283/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 1.1078\n",
            "Epoch 284/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 4.3008\n",
            "Epoch 285/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 2.6746\n",
            "Epoch 286/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 2.2038\n",
            "Epoch 287/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.9548\n",
            "Epoch 288/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.9779\n",
            "Epoch 289/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.9151\n",
            "Epoch 290/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.9131\n",
            "Epoch 291/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 2.2819\n",
            "Epoch 292/300\n",
            "21/21 [==============================] - 1s 64ms/step - loss: 3.2251\n",
            "Epoch 293/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.9364\n",
            "Epoch 294/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.8858\n",
            "Epoch 295/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.8228\n",
            "Epoch 296/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.6381\n",
            "Epoch 297/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.6631\n",
            "Epoch 298/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.9487\n",
            "Epoch 299/300\n",
            "21/21 [==============================] - 1s 64ms/step - loss: 1.6436\n",
            "Epoch 300/300\n",
            "21/21 [==============================] - 1s 64ms/step - loss: 1.4624\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f09bfdde220>"
            ]
          },
          "metadata": {},
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x[668::]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h0O4LC9dC2S8",
        "outputId": "dc812edc-6513-42b9-8976-9427750b3feb"
      },
      "id": "h0O4LC9dC2S8",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[2.33333333],\n",
              "        [2.38      ],\n",
              "        [2.42      ],\n",
              "        [2.42      ],\n",
              "        [2.72      ],\n",
              "        [2.87      ],\n",
              "        [2.735     ],\n",
              "        [2.95      ],\n",
              "        [2.83      ],\n",
              "        [2.85666667],\n",
              "        [2.96      ],\n",
              "        [2.86      ],\n",
              "        [3.07      ],\n",
              "        [3.15      ],\n",
              "        [3.01      ],\n",
              "        [2.69      ],\n",
              "        [2.63      ],\n",
              "        [2.73      ],\n",
              "        [2.45      ],\n",
              "        [2.51      ],\n",
              "        [2.14      ],\n",
              "        [2.015     ],\n",
              "        [2.02      ],\n",
              "        [1.4925    ],\n",
              "        [1.68      ],\n",
              "        [1.69      ],\n",
              "        [1.79666667],\n",
              "        [1.92      ],\n",
              "        [1.51      ],\n",
              "        [1.12      ],\n",
              "        [0.7       ],\n",
              "        [0.64      ],\n",
              "        [0.655     ],\n",
              "        [0.66      ],\n",
              "        [0.55      ],\n",
              "        [0.72      ],\n",
              "        [0.69      ],\n",
              "        [0.87666667],\n",
              "        [0.84      ],\n",
              "        [0.93      ],\n",
              "        [1.1       ],\n",
              "        [1.445     ],\n",
              "        [1.74      ],\n",
              "        [1.65      ],\n",
              "        [1.6       ],\n",
              "        [1.45      ],\n",
              "        [1.22666667],\n",
              "        [1.3       ],\n",
              "        [1.52      ],\n",
              "        [1.565     ],\n",
              "        [1.43      ],\n",
              "        [1.52      ],\n",
              "        [1.79      ],\n",
              "        [1.83      ],\n",
              "        [2.32      ],\n",
              "        [2.92333333],\n",
              "        [2.85      ],\n",
              "        [2.98      ],\n",
              "        [2.635     ],\n",
              "        [3.15      ]]])"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x[-1].shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ATArUVDXC2Qq",
        "outputId": "04c34442-2ca0-464f-f0b4-a63e41926b28"
      },
      "id": "ATArUVDXC2Qq",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(60, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 127
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "yhat=model.predict(x[666::],verbose=0)"
      ],
      "metadata": {
        "id": "nhHRg8j3C2OA"
      },
      "id": "nhHRg8j3C2OA",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "yhat"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "odVDmv5-C2Lk",
        "outputId": "52c6a472-5ce4-4e36-eeb0-a94f4090cfab"
      },
      "id": "odVDmv5-C2Lk",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[2.566312],\n",
              "       [2.667696],\n",
              "       [2.800036]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 99
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# predictions for next n months\n",
        "n=60\n",
        "i=0\n",
        "output=[] #output list is empty\n",
        "x_input=x[-1] #start with last 1 record as the input\n",
        "temp_input=x_input #create a temp variable\n",
        "while(i<n):\n",
        "  if temp_input.shape[0] > 60:\n",
        "    x_input=temp_input[1:]\n",
        "    x_input=x_input.reshape((1,n_steps,n_features))\n",
        "    yhat=model.predict(x_input,verbose=0)\n",
        "    temp_input = np.append(temp_input, yhat)\n",
        "    temp_input=temp_input[1:]\n",
        "    output.append(yhat[0][0])\n",
        "    i=i+1\n",
        "  else:\n",
        "    x_input=x_input.reshape(1,n_steps,n_features)\n",
        "    yhat=model.predict(x_input, verbose=0)\n",
        "    print(yhat[0])\n",
        "    temp_input = np.append(temp_input, yhat)\n",
        "    temp_input = temp_input.reshape(-1,1)\n",
        "    output.append(yhat[0][0])\n",
        "    i=i+1\n",
        "\n",
        "print(output)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "knLOOWOpC2FN",
        "outputId": "fc135c20-d70b-4e21-a8a4-666b762cbebc"
      },
      "id": "knLOOWOpC2FN",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2.8000374]\n",
            "[2.8000374, 2.9246542, 3.073273, 3.1969893, 3.2871568, 3.3417015, 3.3606625, 3.3605425, 3.3333924, 3.2711835, 3.1731448, 3.0068417, 2.7749984, 2.4658666, 2.0529413, 1.6001272, 1.1751618, 0.75080323, 0.3307258, 0.0030741096, -0.28067058, -0.4446209, -0.52068996, -0.50943255, -0.47385967, -0.41865295, -0.37615478, -0.33770585, -0.32926786, -0.40407062, -0.5213704, -0.63943195, -0.70299315, -0.7036984, -0.6534252, -0.5397507, -0.41114306, -0.23590338, -0.040505886, 0.18961275, 0.44891527, 0.6716749, 0.86643195, 1.0381517, 1.2316427, 1.4397013, 1.6761045, 1.8888725, 2.0758796, 2.2236114, 2.357306, 2.4851213, 2.6063957, 2.734652, 2.8982036, 3.0606582, 3.1746557, 3.235098, 3.0905418, 2.7776456]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "output"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iUpca5FaicKv",
        "outputId": "9d0d5a6b-5d27-41e4-a8f4-f731320e69da"
      },
      "id": "iUpca5FaicKv",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[2.8000374,\n",
              " 2.9246542,\n",
              " 3.073273,\n",
              " 3.1969893,\n",
              " 3.2871568,\n",
              " 3.3417015,\n",
              " 3.3606625,\n",
              " 3.3605425,\n",
              " 3.3333924,\n",
              " 3.2711835,\n",
              " 3.1731448,\n",
              " 3.0068417,\n",
              " 2.7749984,\n",
              " 2.4658666,\n",
              " 2.0529413,\n",
              " 1.6001272,\n",
              " 1.1751618,\n",
              " 0.75080323,\n",
              " 0.3307258,\n",
              " 0.0030741096,\n",
              " -0.28067058,\n",
              " -0.4446209,\n",
              " -0.52068996,\n",
              " -0.50943255,\n",
              " -0.47385967,\n",
              " -0.41865295,\n",
              " -0.37615478,\n",
              " -0.33770585,\n",
              " -0.32926786,\n",
              " -0.40407062,\n",
              " -0.5213704,\n",
              " -0.63943195,\n",
              " -0.70299315,\n",
              " -0.7036984,\n",
              " -0.6534252,\n",
              " -0.5397507,\n",
              " -0.41114306,\n",
              " -0.23590338,\n",
              " -0.040505886,\n",
              " 0.18961275,\n",
              " 0.44891527,\n",
              " 0.6716749,\n",
              " 0.86643195,\n",
              " 1.0381517,\n",
              " 1.2316427,\n",
              " 1.4397013,\n",
              " 1.6761045,\n",
              " 1.8888725,\n",
              " 2.0758796,\n",
              " 2.2236114,\n",
              " 2.357306,\n",
              " 2.4851213,\n",
              " 2.6063957,\n",
              " 2.734652,\n",
              " 2.8982036,\n",
              " 3.0606582,\n",
              " 3.1746557,\n",
              " 3.235098,\n",
              " 3.0905418,\n",
              " 2.7776456]"
            ]
          },
          "metadata": {},
          "execution_count": 135
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(output)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        },
        "id": "BhBikKnBifPQ",
        "outputId": "0b0fb6c7-70e2-4e5e-fcaf-87002f1af9d8"
      },
      "id": "BhBikKnBifPQ",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f09b85e9a00>]"
            ]
          },
          "metadata": {},
          "execution_count": 141
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1152x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XTJ1y_O5iykD",
        "outputId": "234238cd-35f4-480e-d859-a1ae12c67737"
      },
      "id": "XTJ1y_O5iykD",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(669, 60, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 143
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create training set predictions\n",
        "anslist=[]\n",
        "for i in range(669):\n",
        "  x_input=x[i]\n",
        "  yhat=model.predict(x_input.reshape((1,n_steps,n_features)))\n",
        "  anslist.append(yhat[0][0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lvwh_Q7vj7T3",
        "outputId": "b3b93b4d-fe67-4736-fb2c-350e11787ce0"
      },
      "id": "Lvwh_Q7vj7T3",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 43ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 39ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 38ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 39ms/step\n",
            "1/1 [==============================] - 0s 39ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 41ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 40ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 54ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 40ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 38ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 48ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 39ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 43ms/step\n",
            "1/1 [==============================] - 0s 42ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 41ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 48ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 42ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(anslist)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        },
        "id": "Tr4GR9BVkf2O",
        "outputId": "bf914256-4923-4d30-ddf3-1c51fe59dd56"
      },
      "id": "Tr4GR9BVkf2O",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f09b85c8a00>]"
            ]
          },
          "metadata": {},
          "execution_count": 157
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1152x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.DGS10.index"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B7oE6FrllL5g",
        "outputId": "65ab937a-7771-4662-9bf9-f40ca42d1170"
      },
      "id": "B7oE6FrllL5g",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DatetimeIndex(['1962-01-31', '1962-02-28', '1962-03-31', '1962-04-30',\n",
              "               '1962-05-31', '1962-06-30', '1962-07-31', '1962-08-31',\n",
              "               '1962-09-30', '1962-10-31',\n",
              "               ...\n",
              "               '2021-12-31', '2022-01-31', '2022-02-28', '2022-03-31',\n",
              "               '2022-04-30', '2022-05-31', '2022-06-30', '2022-07-31',\n",
              "               '2022-08-31', '2022-09-30'],\n",
              "              dtype='datetime64[ns]', name='Unnamed: 0', length=729, freq='M')"
            ]
          },
          "metadata": {},
          "execution_count": 159
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "projections=pd.DataFrame(anslist,index=df.DGS10.index[60:])"
      ],
      "metadata": {
        "id": "xEYw0VrtlSMQ"
      },
      "id": "xEYw0VrtlSMQ",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(projections,'--', label='Model Output')\n",
        "plt.plot(df.DGS10, label = '10Y Treasury')\n",
        "plt.legend(fontsize=15)\n",
        "plt.yticks(fontsize=15)\n",
        "plt.xticks(fontsize=15)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 525
        },
        "id": "SrvEYWuImbFC",
        "outputId": "2d841355-8dd4-4e90-b934-5f484c5c6290"
      },
      "id": "SrvEYWuImbFC",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([711858., 715510., 719163., 722815., 726468., 730120., 733773.,\n",
              "        737425., 741078.]), <a list of 9 Text major ticklabel objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 201
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1152x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Regularization - Dropout"
      ],
      "metadata": {
        "id": "amlQLVfKn-Zz"
      },
      "id": "amlQLVfKn-Zz"
    },
    {
      "cell_type": "code",
      "source": [
        "#initiate the model\n",
        "model2 = Sequential() #initiate the model\n",
        "#Add input layer with 50 neurons and dropout\n",
        "model2.add(LSTM(50, activation='relu', return_sequences=True, input_shape=(n_steps,n_features)))\n",
        "model2.add(Dropout(0.2))\n",
        "#Add second layer with 50 neurons and dropout\n",
        "model2.add(LSTM(50, activation='relu'))\n",
        "model2.add(Dropout(0.2))\n",
        "#Add a fully connected output layer with 1 output\n",
        "model2.add(Dense(1))\n",
        "#compile the model\n",
        "model2.compile(optimizer='adam', loss='mse')"
      ],
      "metadata": {
        "id": "h1LHq3UwmoRV"
      },
      "id": "h1LHq3UwmoRV",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#fit the model\n",
        "model2.fit(x,y, epochs = 300, verbose=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LNKaDA_Zn-Hu",
        "outputId": "cd733887-070e-4425-e4a7-3827680b95b3"
      },
      "id": "LNKaDA_Zn-Hu",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/300\n",
            "21/21 [==============================] - 5s 64ms/step - loss: 510.8278\n",
            "Epoch 2/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 55.9805\n",
            "Epoch 3/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 45.0239\n",
            "Epoch 4/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 39.2615\n",
            "Epoch 5/300\n",
            "21/21 [==============================] - 1s 65ms/step - loss: 36.4255\n",
            "Epoch 6/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 33.3645\n",
            "Epoch 7/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 31.3434\n",
            "Epoch 8/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 20.2018\n",
            "Epoch 9/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 6.0067\n",
            "Epoch 10/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 3.0411\n",
            "Epoch 11/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.9502\n",
            "Epoch 12/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 3.0308\n",
            "Epoch 13/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 2.5225\n",
            "Epoch 14/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 2.3725\n",
            "Epoch 15/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 2.5074\n",
            "Epoch 16/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 2.1958\n",
            "Epoch 17/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 2.1894\n",
            "Epoch 18/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 2.4561\n",
            "Epoch 19/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 2.1181\n",
            "Epoch 20/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 2.0221\n",
            "Epoch 21/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 2.1073\n",
            "Epoch 22/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.8504\n",
            "Epoch 23/300\n",
            "21/21 [==============================] - 1s 65ms/step - loss: 2.0151\n",
            "Epoch 24/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.7269\n",
            "Epoch 25/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.8449\n",
            "Epoch 26/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.7657\n",
            "Epoch 27/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.6414\n",
            "Epoch 28/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.6816\n",
            "Epoch 29/300\n",
            "21/21 [==============================] - 1s 66ms/step - loss: 1.7802\n",
            "Epoch 30/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 2.1029\n",
            "Epoch 31/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 2.0024\n",
            "Epoch 32/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.7502\n",
            "Epoch 33/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.7736\n",
            "Epoch 34/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.9458\n",
            "Epoch 35/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.6591\n",
            "Epoch 36/300\n",
            "21/21 [==============================] - 1s 64ms/step - loss: 1.7847\n",
            "Epoch 37/300\n",
            "21/21 [==============================] - 3s 123ms/step - loss: 1.6573\n",
            "Epoch 38/300\n",
            "21/21 [==============================] - 3s 126ms/step - loss: 1.6565\n",
            "Epoch 39/300\n",
            "21/21 [==============================] - 3s 123ms/step - loss: 1.7271\n",
            "Epoch 40/300\n",
            "21/21 [==============================] - 3s 128ms/step - loss: 1.4740\n",
            "Epoch 41/300\n",
            "21/21 [==============================] - 3s 126ms/step - loss: 1.5409\n",
            "Epoch 42/300\n",
            "21/21 [==============================] - 3s 144ms/step - loss: 1.4545\n",
            "Epoch 43/300\n",
            "21/21 [==============================] - 2s 94ms/step - loss: 1.6293\n",
            "Epoch 44/300\n",
            "21/21 [==============================] - 2s 77ms/step - loss: 1.4304\n",
            "Epoch 45/300\n",
            "21/21 [==============================] - 3s 131ms/step - loss: 1.7281\n",
            "Epoch 46/300\n",
            "21/21 [==============================] - 2s 77ms/step - loss: 1.3967\n",
            "Epoch 47/300\n",
            "21/21 [==============================] - 2s 74ms/step - loss: 1.6385\n",
            "Epoch 48/300\n",
            "21/21 [==============================] - 2s 110ms/step - loss: 1.5537\n",
            "Epoch 49/300\n",
            "21/21 [==============================] - 2s 93ms/step - loss: 1.6312\n",
            "Epoch 50/300\n",
            "21/21 [==============================] - 1s 72ms/step - loss: 1.4257\n",
            "Epoch 51/300\n",
            "21/21 [==============================] - 3s 125ms/step - loss: 1.3775\n",
            "Epoch 52/300\n",
            "21/21 [==============================] - 2s 79ms/step - loss: 1.4321\n",
            "Epoch 53/300\n",
            "21/21 [==============================] - 2s 85ms/step - loss: 1.5969\n",
            "Epoch 54/300\n",
            "21/21 [==============================] - 1s 69ms/step - loss: 1.6087\n",
            "Epoch 55/300\n",
            "21/21 [==============================] - 1s 67ms/step - loss: 1.4540\n",
            "Epoch 56/300\n",
            "21/21 [==============================] - 3s 126ms/step - loss: 1.4792\n",
            "Epoch 57/300\n",
            "21/21 [==============================] - 2s 87ms/step - loss: 1.3326\n",
            "Epoch 58/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.5625\n",
            "Epoch 59/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.3986\n",
            "Epoch 60/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.6667\n",
            "Epoch 61/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.5756\n",
            "Epoch 62/300\n",
            "21/21 [==============================] - 1s 64ms/step - loss: 1.3336\n",
            "Epoch 63/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.4318\n",
            "Epoch 64/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.4178\n",
            "Epoch 65/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.3047\n",
            "Epoch 66/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.5335\n",
            "Epoch 67/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 1.3167\n",
            "Epoch 68/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.3718\n",
            "Epoch 69/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.4846\n",
            "Epoch 70/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.1535\n",
            "Epoch 71/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.2423\n",
            "Epoch 72/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.3767\n",
            "Epoch 73/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.2932\n",
            "Epoch 74/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 1.3599\n",
            "Epoch 75/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 1.4988\n",
            "Epoch 76/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.3165\n",
            "Epoch 77/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.3281\n",
            "Epoch 78/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.3505\n",
            "Epoch 79/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.3367\n",
            "Epoch 80/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.3947\n",
            "Epoch 81/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.2469\n",
            "Epoch 82/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.4434\n",
            "Epoch 83/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.3059\n",
            "Epoch 84/300\n",
            "21/21 [==============================] - 1s 64ms/step - loss: 1.3035\n",
            "Epoch 85/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.3804\n",
            "Epoch 86/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.2182\n",
            "Epoch 87/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.3644\n",
            "Epoch 88/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.6789\n",
            "Epoch 89/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.3944\n",
            "Epoch 90/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.5227\n",
            "Epoch 91/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.4263\n",
            "Epoch 92/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.2184\n",
            "Epoch 93/300\n",
            "21/21 [==============================] - 1s 64ms/step - loss: 1.1615\n",
            "Epoch 94/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.3926\n",
            "Epoch 95/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.3258\n",
            "Epoch 96/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.3500\n",
            "Epoch 97/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.2335\n",
            "Epoch 98/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.2543\n",
            "Epoch 99/300\n",
            "21/21 [==============================] - 2s 75ms/step - loss: 1.2946\n",
            "Epoch 100/300\n",
            "21/21 [==============================] - 2s 107ms/step - loss: 1.2972\n",
            "Epoch 101/300\n",
            "21/21 [==============================] - 2s 107ms/step - loss: 1.1311\n",
            "Epoch 102/300\n",
            "21/21 [==============================] - 2s 104ms/step - loss: 1.2508\n",
            "Epoch 103/300\n",
            "21/21 [==============================] - 2s 87ms/step - loss: 1.0646\n",
            "Epoch 104/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.2019\n",
            "Epoch 105/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.2457\n",
            "Epoch 106/300\n",
            "21/21 [==============================] - 1s 67ms/step - loss: 1.1209\n",
            "Epoch 107/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 1.2139\n",
            "Epoch 108/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.1576\n",
            "Epoch 109/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.2315\n",
            "Epoch 110/300\n",
            "21/21 [==============================] - 1s 59ms/step - loss: 1.3598\n",
            "Epoch 111/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.4618\n",
            "Epoch 112/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.3810\n",
            "Epoch 113/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.0931\n",
            "Epoch 114/300\n",
            "21/21 [==============================] - 2s 88ms/step - loss: 1.2580\n",
            "Epoch 115/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.1925\n",
            "Epoch 116/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.0486\n",
            "Epoch 117/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.1764\n",
            "Epoch 118/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.1824\n",
            "Epoch 119/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.0526\n",
            "Epoch 120/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.2029\n",
            "Epoch 121/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.1543\n",
            "Epoch 122/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.1870\n",
            "Epoch 123/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.2067\n",
            "Epoch 124/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.0237\n",
            "Epoch 125/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.2929\n",
            "Epoch 126/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.2138\n",
            "Epoch 127/300\n",
            "21/21 [==============================] - 1s 60ms/step - loss: 1.1370\n",
            "Epoch 128/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.1257\n",
            "Epoch 129/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.2050\n",
            "Epoch 130/300\n",
            "21/21 [==============================] - 2s 95ms/step - loss: 1.0934\n",
            "Epoch 131/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.1629\n",
            "Epoch 132/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.3708\n",
            "Epoch 133/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.2033\n",
            "Epoch 134/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.1579\n",
            "Epoch 135/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.3544\n",
            "Epoch 136/300\n",
            "21/21 [==============================] - 1s 64ms/step - loss: 1.1204\n",
            "Epoch 137/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.3338\n",
            "Epoch 138/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.1734\n",
            "Epoch 139/300\n",
            "21/21 [==============================] - 2s 88ms/step - loss: 1.0988\n",
            "Epoch 140/300\n",
            "21/21 [==============================] - 2s 86ms/step - loss: 1.0566\n",
            "Epoch 141/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.0671\n",
            "Epoch 142/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.1017\n",
            "Epoch 143/300\n",
            "21/21 [==============================] - 1s 64ms/step - loss: 1.1090\n",
            "Epoch 144/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.1160\n",
            "Epoch 145/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9965\n",
            "Epoch 146/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.1344\n",
            "Epoch 147/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.1083\n",
            "Epoch 148/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.1100\n",
            "Epoch 149/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.0403\n",
            "Epoch 150/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.1691\n",
            "Epoch 151/300\n",
            "21/21 [==============================] - 1s 64ms/step - loss: 0.9468\n",
            "Epoch 152/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.0841\n",
            "Epoch 153/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.1633\n",
            "Epoch 154/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.0307\n",
            "Epoch 155/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.1326\n",
            "Epoch 156/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.0198\n",
            "Epoch 157/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.0492\n",
            "Epoch 158/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.0525\n",
            "Epoch 159/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.0700\n",
            "Epoch 160/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.1271\n",
            "Epoch 161/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.1761\n",
            "Epoch 162/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.0160\n",
            "Epoch 163/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9922\n",
            "Epoch 164/300\n",
            "21/21 [==============================] - 1s 65ms/step - loss: 0.9811\n",
            "Epoch 165/300\n",
            "21/21 [==============================] - 1s 64ms/step - loss: 1.1275\n",
            "Epoch 166/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.0020\n",
            "Epoch 167/300\n",
            "21/21 [==============================] - 1s 65ms/step - loss: 1.0120\n",
            "Epoch 168/300\n",
            "21/21 [==============================] - 1s 64ms/step - loss: 0.9399\n",
            "Epoch 169/300\n",
            "21/21 [==============================] - 1s 64ms/step - loss: 0.8373\n",
            "Epoch 170/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.0790\n",
            "Epoch 171/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.0106\n",
            "Epoch 172/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.0343\n",
            "Epoch 173/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.9815\n",
            "Epoch 174/300\n",
            "21/21 [==============================] - 1s 65ms/step - loss: 1.0752\n",
            "Epoch 175/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.9747\n",
            "Epoch 176/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.0009\n",
            "Epoch 177/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9522\n",
            "Epoch 178/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.9262\n",
            "Epoch 179/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.0016\n",
            "Epoch 180/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.0476\n",
            "Epoch 181/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.0305\n",
            "Epoch 182/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.0035\n",
            "Epoch 183/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9950\n",
            "Epoch 184/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 1.0205\n",
            "Epoch 185/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.0102\n",
            "Epoch 186/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.1190\n",
            "Epoch 187/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.8920\n",
            "Epoch 188/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9468\n",
            "Epoch 189/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.0521\n",
            "Epoch 190/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.9359\n",
            "Epoch 191/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9532\n",
            "Epoch 192/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.8917\n",
            "Epoch 193/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.8236\n",
            "Epoch 194/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.8544\n",
            "Epoch 195/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 1.0642\n",
            "Epoch 196/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9785\n",
            "Epoch 197/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.0236\n",
            "Epoch 198/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9338\n",
            "Epoch 199/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9510\n",
            "Epoch 200/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.9542\n",
            "Epoch 201/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9259\n",
            "Epoch 202/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.9737\n",
            "Epoch 203/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.8478\n",
            "Epoch 204/300\n",
            "21/21 [==============================] - 2s 92ms/step - loss: 0.9555\n",
            "Epoch 205/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.8140\n",
            "Epoch 206/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9256\n",
            "Epoch 207/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9268\n",
            "Epoch 208/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9380\n",
            "Epoch 209/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.8713\n",
            "Epoch 210/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 1.0729\n",
            "Epoch 211/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.9986\n",
            "Epoch 212/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9497\n",
            "Epoch 213/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.9247\n",
            "Epoch 214/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.8652\n",
            "Epoch 215/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9976\n",
            "Epoch 216/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9386\n",
            "Epoch 217/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.9192\n",
            "Epoch 218/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.9092\n",
            "Epoch 219/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.9838\n",
            "Epoch 220/300\n",
            "21/21 [==============================] - 1s 65ms/step - loss: 1.0816\n",
            "Epoch 221/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.9961\n",
            "Epoch 222/300\n",
            "21/21 [==============================] - 1s 64ms/step - loss: 1.0453\n",
            "Epoch 223/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.8455\n",
            "Epoch 224/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.8316\n",
            "Epoch 225/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.9206\n",
            "Epoch 226/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.9154\n",
            "Epoch 227/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.8739\n",
            "Epoch 228/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.9563\n",
            "Epoch 229/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.8597\n",
            "Epoch 230/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.8410\n",
            "Epoch 231/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.9977\n",
            "Epoch 232/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.8689\n",
            "Epoch 233/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.8793\n",
            "Epoch 234/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.9930\n",
            "Epoch 235/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.8858\n",
            "Epoch 236/300\n",
            "21/21 [==============================] - 1s 64ms/step - loss: 0.9218\n",
            "Epoch 237/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.9305\n",
            "Epoch 238/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9921\n",
            "Epoch 239/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.8728\n",
            "Epoch 240/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.8472\n",
            "Epoch 241/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9555\n",
            "Epoch 242/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9640\n",
            "Epoch 243/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.9212\n",
            "Epoch 244/300\n",
            "21/21 [==============================] - 1s 64ms/step - loss: 0.8729\n",
            "Epoch 245/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.8317\n",
            "Epoch 246/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9537\n",
            "Epoch 247/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.8299\n",
            "Epoch 248/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.9161\n",
            "Epoch 249/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9586\n",
            "Epoch 250/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.8434\n",
            "Epoch 251/300\n",
            "21/21 [==============================] - 2s 85ms/step - loss: 0.9995\n",
            "Epoch 252/300\n",
            "21/21 [==============================] - 2s 96ms/step - loss: 0.9183\n",
            "Epoch 253/300\n",
            "21/21 [==============================] - 2s 109ms/step - loss: 0.7981\n",
            "Epoch 254/300\n",
            "21/21 [==============================] - 2s 106ms/step - loss: 0.8373\n",
            "Epoch 255/300\n",
            "21/21 [==============================] - 2s 83ms/step - loss: 0.8006\n",
            "Epoch 256/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.8313\n",
            "Epoch 257/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.7638\n",
            "Epoch 258/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.7661\n",
            "Epoch 259/300\n",
            "21/21 [==============================] - 1s 64ms/step - loss: 0.8773\n",
            "Epoch 260/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.7797\n",
            "Epoch 261/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.8394\n",
            "Epoch 262/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9170\n",
            "Epoch 263/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.8146\n",
            "Epoch 264/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.7261\n",
            "Epoch 265/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.8188\n",
            "Epoch 266/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9082\n",
            "Epoch 267/300\n",
            "21/21 [==============================] - 1s 61ms/step - loss: 0.9527\n",
            "Epoch 268/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9057\n",
            "Epoch 269/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.8491\n",
            "Epoch 270/300\n",
            "21/21 [==============================] - 1s 64ms/step - loss: 0.9062\n",
            "Epoch 271/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.9289\n",
            "Epoch 272/300\n",
            "21/21 [==============================] - 1s 65ms/step - loss: 0.8698\n",
            "Epoch 273/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9500\n",
            "Epoch 274/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9137\n",
            "Epoch 275/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.8148\n",
            "Epoch 276/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.9576\n",
            "Epoch 277/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.9469\n",
            "Epoch 278/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.8441\n",
            "Epoch 279/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.8289\n",
            "Epoch 280/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.8565\n",
            "Epoch 281/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.8396\n",
            "Epoch 282/300\n",
            "21/21 [==============================] - 1s 64ms/step - loss: 0.7235\n",
            "Epoch 283/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.7817\n",
            "Epoch 284/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.8573\n",
            "Epoch 285/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.8916\n",
            "Epoch 286/300\n",
            "21/21 [==============================] - 1s 64ms/step - loss: 0.8938\n",
            "Epoch 287/300\n",
            "21/21 [==============================] - 1s 65ms/step - loss: 1.0138\n",
            "Epoch 288/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.8778\n",
            "Epoch 289/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.9108\n",
            "Epoch 290/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.9039\n",
            "Epoch 291/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.8655\n",
            "Epoch 292/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.7441\n",
            "Epoch 293/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.7635\n",
            "Epoch 294/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.8625\n",
            "Epoch 295/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.8509\n",
            "Epoch 296/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.7364\n",
            "Epoch 297/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.7759\n",
            "Epoch 298/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.7294\n",
            "Epoch 299/300\n",
            "21/21 [==============================] - 1s 63ms/step - loss: 0.9746\n",
            "Epoch 300/300\n",
            "21/21 [==============================] - 1s 62ms/step - loss: 0.9232\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f09c34f8250>"
            ]
          },
          "metadata": {},
          "execution_count": 172
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "anslist=[]\n",
        "for i in range(669):\n",
        "  x_input=x[i]\n",
        "  yhat=model2.predict(x_input.reshape((1,n_steps,n_features)))\n",
        "  anslist.append(yhat[0][0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vj0exSLcouKk",
        "outputId": "86f4ac95-4b2b-4021-bb42-a88892cb7f4e"
      },
      "id": "Vj0exSLcouKk",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 1s 757ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 51ms/step\n",
            "1/1 [==============================] - 0s 90ms/step\n",
            "1/1 [==============================] - 0s 67ms/step\n",
            "1/1 [==============================] - 0s 48ms/step\n",
            "1/1 [==============================] - 0s 84ms/step\n",
            "1/1 [==============================] - 0s 49ms/step\n",
            "1/1 [==============================] - 0s 99ms/step\n",
            "1/1 [==============================] - 0s 40ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 42ms/step\n",
            "1/1 [==============================] - 0s 71ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 43ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 39ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 85ms/step\n",
            "1/1 [==============================] - 0s 116ms/step\n",
            "1/1 [==============================] - 0s 104ms/step\n",
            "1/1 [==============================] - 0s 121ms/step\n",
            "1/1 [==============================] - 0s 69ms/step\n",
            "1/1 [==============================] - 0s 124ms/step\n",
            "1/1 [==============================] - 0s 71ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "1/1 [==============================] - 0s 136ms/step\n",
            "1/1 [==============================] - 0s 79ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 60ms/step\n",
            "1/1 [==============================] - 0s 47ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 38ms/step\n",
            "1/1 [==============================] - 0s 124ms/step\n",
            "1/1 [==============================] - 0s 41ms/step\n",
            "1/1 [==============================] - 0s 44ms/step\n",
            "1/1 [==============================] - 0s 72ms/step\n",
            "1/1 [==============================] - 0s 71ms/step\n",
            "1/1 [==============================] - 0s 100ms/step\n",
            "1/1 [==============================] - 0s 70ms/step\n",
            "1/1 [==============================] - 0s 66ms/step\n",
            "1/1 [==============================] - 0s 41ms/step\n",
            "1/1 [==============================] - 0s 39ms/step\n",
            "1/1 [==============================] - 0s 46ms/step\n",
            "1/1 [==============================] - 0s 53ms/step\n",
            "1/1 [==============================] - 0s 65ms/step\n",
            "1/1 [==============================] - 0s 44ms/step\n",
            "1/1 [==============================] - 0s 51ms/step\n",
            "1/1 [==============================] - 0s 46ms/step\n",
            "1/1 [==============================] - 0s 55ms/step\n",
            "1/1 [==============================] - 0s 55ms/step\n",
            "1/1 [==============================] - 0s 45ms/step\n",
            "1/1 [==============================] - 0s 57ms/step\n",
            "1/1 [==============================] - 0s 58ms/step\n",
            "1/1 [==============================] - 0s 99ms/step\n",
            "1/1 [==============================] - 0s 53ms/step\n",
            "1/1 [==============================] - 0s 50ms/step\n",
            "1/1 [==============================] - 0s 52ms/step\n",
            "1/1 [==============================] - 0s 67ms/step\n",
            "1/1 [==============================] - 0s 56ms/step\n",
            "1/1 [==============================] - 0s 54ms/step\n",
            "1/1 [==============================] - 0s 63ms/step\n",
            "1/1 [==============================] - 0s 55ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 45ms/step\n",
            "1/1 [==============================] - 0s 54ms/step\n",
            "1/1 [==============================] - 0s 47ms/step\n",
            "1/1 [==============================] - 0s 57ms/step\n",
            "1/1 [==============================] - 0s 112ms/step\n",
            "1/1 [==============================] - 0s 92ms/step\n",
            "1/1 [==============================] - 0s 68ms/step\n",
            "1/1 [==============================] - 0s 92ms/step\n",
            "1/1 [==============================] - 0s 77ms/step\n",
            "1/1 [==============================] - 0s 46ms/step\n",
            "1/1 [==============================] - 0s 54ms/step\n",
            "1/1 [==============================] - 0s 62ms/step\n",
            "1/1 [==============================] - 0s 57ms/step\n",
            "1/1 [==============================] - 0s 59ms/step\n",
            "1/1 [==============================] - 0s 57ms/step\n",
            "1/1 [==============================] - 0s 44ms/step\n",
            "1/1 [==============================] - 0s 46ms/step\n",
            "1/1 [==============================] - 0s 58ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(anslist)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        },
        "id": "H0pUma80qsX1",
        "outputId": "d0c03e20-55c2-439e-d97c-951b51a72547"
      },
      "id": "H0pUma80qsX1",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f09c333f460>]"
            ]
          },
          "metadata": {},
          "execution_count": 174
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1152x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "projections2=pd.DataFrame(anslist,index=df.DGS10.index[60:])"
      ],
      "metadata": {
        "id": "nEWMYXnrq8Zc"
      },
      "id": "nEWMYXnrq8Zc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(projections, '--', label='Model Output')\n",
        "plt.plot(projections2,'--', label='Model #2 Output')\n",
        "plt.plot(df.DGS10, label = '10Y Treasury')\n",
        "plt.legend(fontsize=15)\n",
        "plt.yticks(fontsize=15)\n",
        "plt.xticks(fontsize=15)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 525
        },
        "id": "iu2P7goOrDrK",
        "outputId": "5946a6ec-15bc-44c9-ca9c-134aecd36bfc"
      },
      "id": "iu2P7goOrDrK",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([711858., 715510., 719163., 722815., 726468., 730120., 733773.,\n",
              "        737425., 741078.]), <a list of 9 Text major ticklabel objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 203
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1152x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n=60\n",
        "i=0\n",
        "output2=[] #output list is empty\n",
        "x_input=x[-1] #start with last 1 record as the input\n",
        "temp_input=x_input #create a temp variable\n",
        "while(i<n):\n",
        "  if temp_input.shape[0] > 60:\n",
        "    x_input=temp_input[1:]\n",
        "    x_input=x_input.reshape((1,n_steps,n_features))\n",
        "    yhat=model2.predict(x_input,verbose=0)\n",
        "    temp_input = np.append(temp_input, yhat)\n",
        "    temp_input=temp_input[1:]\n",
        "    output2.append(yhat[0][0])\n",
        "    i=i+1\n",
        "  else:\n",
        "    x_input=x_input.reshape(1,n_steps,n_features)\n",
        "    yhat=model2.predict(x_input, verbose=0)\n",
        "    print(yhat[0])\n",
        "    temp_input = np.append(temp_input, yhat)\n",
        "    temp_input = temp_input.reshape(-1,1)\n",
        "    output2.append(yhat[0][0])\n",
        "    i=i+1\n",
        "\n",
        "print(output2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8h6N5kTArHBI",
        "outputId": "aa85043f-f6fd-473c-c509-65fc1c950036"
      },
      "id": "8h6N5kTArHBI",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[3.0988917]\n",
            "[3.0988917, 3.2496152, 3.3802664, 3.4848583, 3.5522904, 3.573099, 3.5395525, 3.4444451, 3.3056288, 3.1273456, 2.931297, 2.7353034, 2.5498512, 2.382941, 2.2364109, 2.1054058, 1.9934623, 1.9107056, 1.8519655, 1.8162806, 1.7957817, 1.7838216, 1.7861009, 1.8084227, 1.8385268, 1.8726125, 1.9035408, 1.9353292, 1.9695411, 1.9988246, 2.027486, 2.0557344, 2.087316, 2.1233325, 2.1630733, 2.205021, 2.2511806, 2.2985225, 2.3474782, 2.395713, 2.4422565, 2.4866512, 2.5305874, 2.5708413, 2.60355, 2.6278677, 2.6404498, 2.640565, 2.6288507, 2.6059604, 2.5713933, 2.5242193, 2.469174, 2.4096751, 2.3463404, 2.284602, 2.2258093, 2.1670175, 2.1102443, 2.0538673]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(output2)\n",
        "plt.plot(output)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        },
        "id": "WiaVoLqQrh_c",
        "outputId": "769a9061-9840-4489-90ce-e9fc07ddc2a6"
      },
      "id": "WiaVoLqQrh_c",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f0a2c55dc70>]"
            ]
          },
          "metadata": {},
          "execution_count": 182
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1152x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dates=pd.date_range('9/30/2022', periods = 60, freq='M') "
      ],
      "metadata": {
        "id": "ox_w6Tp4s_yz"
      },
      "id": "ox_w6Tp4s_yz",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dates"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "StTB8OuotXZG",
        "outputId": "876ed8e4-6fa7-46b6-b6e2-5a850ca04041"
      },
      "id": "StTB8OuotXZG",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DatetimeIndex(['2022-09-30', '2022-10-31', '2022-11-30', '2022-12-31',\n",
              "               '2023-01-31', '2023-02-28', '2023-03-31', '2023-04-30',\n",
              "               '2023-05-31', '2023-06-30', '2023-07-31', '2023-08-31',\n",
              "               '2023-09-30', '2023-10-31', '2023-11-30', '2023-12-31',\n",
              "               '2024-01-31', '2024-02-29', '2024-03-31', '2024-04-30',\n",
              "               '2024-05-31', '2024-06-30', '2024-07-31', '2024-08-31',\n",
              "               '2024-09-30', '2024-10-31', '2024-11-30', '2024-12-31',\n",
              "               '2025-01-31', '2025-02-28', '2025-03-31', '2025-04-30',\n",
              "               '2025-05-31', '2025-06-30', '2025-07-31', '2025-08-31',\n",
              "               '2025-09-30', '2025-10-31', '2025-11-30', '2025-12-31',\n",
              "               '2026-01-31', '2026-02-28', '2026-03-31', '2026-04-30',\n",
              "               '2026-05-31', '2026-06-30', '2026-07-31', '2026-08-31',\n",
              "               '2026-09-30', '2026-10-31', '2026-11-30', '2026-12-31',\n",
              "               '2027-01-31', '2027-02-28', '2027-03-31', '2027-04-30',\n",
              "               '2027-05-31', '2027-06-30', '2027-07-31', '2027-08-31'],\n",
              "              dtype='datetime64[ns]', freq='M')"
            ]
          },
          "metadata": {},
          "execution_count": 186
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "forecast1=pd.DataFrame(output,index=dates)\n",
        "forecast2=pd.DataFrame(output2,index=dates)"
      ],
      "metadata": {
        "id": "i9YPDvnTrlBd"
      },
      "id": "i9YPDvnTrlBd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "plt.plot(forecast2.loc['1990':], '--', label='Model 2 Forecast (Regularized)')\n",
        "plt.plot(df.DGS10[:-1].loc['1990':], label='10Y Treasury Rate')\n",
        "plt.legend(fontsize=15)\n",
        "plt.yticks(fontsize=15)\n",
        "plt.xticks(fontsize=15)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 537
        },
        "id": "gaLi93rfth16",
        "outputId": "603f7e86-5972-43be-caee-9d3534f5bccc"
      },
      "id": "gaLi93rfth16",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([724642., 726468., 728294., 730120., 731947., 733773., 735599.,\n",
              "        737425., 739252., 741078.]),\n",
              " <a list of 10 Text major ticklabel objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 222
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1152x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "arima.set_index('Unnamed: 0', inplace=True)"
      ],
      "metadata": {
        "id": "7yADCOPOtjG4"
      },
      "id": "7yADCOPOtjG4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arima.index=pd.to_datetime(arima.index)"
      ],
      "metadata": {
        "id": "nDpKe6noDO7h"
      },
      "id": "nDpKe6noDO7h",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arima"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "4qvTKCTOC1qQ",
        "outputId": "708ac452-650b-415f-94ce-d4dee705ef9f"
      },
      "id": "4qvTKCTOC1qQ",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            predicted_mean\n",
              "Unnamed: 0                \n",
              "2022-09-30        3.380431\n",
              "2022-10-31        3.390954\n",
              "2022-11-30        3.401412\n",
              "2022-12-31        3.411806\n",
              "2023-01-31        3.422136\n",
              "2023-02-28        3.432402\n",
              "2023-03-31        3.442606\n",
              "2023-04-30        3.452747\n",
              "2023-05-31        3.462826\n",
              "2023-06-30        3.472843\n",
              "2023-07-31        3.482798\n",
              "2023-08-31        3.492693\n",
              "2023-09-30        3.502527\n",
              "2023-10-31        3.512300\n",
              "2023-11-30        3.522014\n",
              "2023-12-31        3.531667\n",
              "2024-01-31        3.541262\n",
              "2024-02-29        3.550798\n",
              "2024-03-31        3.560275\n",
              "2024-04-30        3.569694\n",
              "2024-05-31        3.579056\n",
              "2024-06-30        3.588359\n",
              "2024-07-31        3.597606\n",
              "2024-08-31        3.606796\n",
              "2024-09-30        3.615930\n",
              "2024-10-31        3.625008\n",
              "2024-11-30        3.634030\n",
              "2024-12-31        3.642996\n",
              "2025-01-31        3.651908\n",
              "2025-02-28        3.660765\n",
              "2025-03-31        3.669567\n",
              "2025-04-30        3.678316\n",
              "2025-05-31        3.687011\n",
              "2025-06-30        3.695653\n",
              "2025-07-31        3.704241\n",
              "2025-08-31        3.712777\n",
              "2025-09-30        3.721260\n",
              "2025-10-31        3.729692\n",
              "2025-11-30        3.738072\n",
              "2025-12-31        3.746400\n",
              "2026-01-31        3.754677\n",
              "2026-02-28        3.762903\n",
              "2026-03-31        3.771079\n",
              "2026-04-30        3.779205\n",
              "2026-05-31        3.787281\n",
              "2026-06-30        3.795307\n",
              "2026-07-31        3.803285\n",
              "2026-08-31        3.811213\n",
              "2026-09-30        3.819092\n",
              "2026-10-31        3.826924\n",
              "2026-11-30        3.834707\n",
              "2026-12-31        3.842442\n",
              "2027-01-31        3.850130\n",
              "2027-02-28        3.857771\n",
              "2027-03-31        3.865365\n",
              "2027-04-30        3.872912\n",
              "2027-05-31        3.880413\n",
              "2027-06-30        3.887868\n",
              "2027-07-31        3.895277"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-16309b9d-666e-4abf-99eb-2e45c1acb6dc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>predicted_mean</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2022-09-30</th>\n",
              "      <td>3.380431</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-10-31</th>\n",
              "      <td>3.390954</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-30</th>\n",
              "      <td>3.401412</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-12-31</th>\n",
              "      <td>3.411806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-01-31</th>\n",
              "      <td>3.422136</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-02-28</th>\n",
              "      <td>3.432402</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-03-31</th>\n",
              "      <td>3.442606</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-04-30</th>\n",
              "      <td>3.452747</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-05-31</th>\n",
              "      <td>3.462826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-06-30</th>\n",
              "      <td>3.472843</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-07-31</th>\n",
              "      <td>3.482798</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-08-31</th>\n",
              "      <td>3.492693</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-09-30</th>\n",
              "      <td>3.502527</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-10-31</th>\n",
              "      <td>3.512300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-11-30</th>\n",
              "      <td>3.522014</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-12-31</th>\n",
              "      <td>3.531667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-31</th>\n",
              "      <td>3.541262</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-02-29</th>\n",
              "      <td>3.550798</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-03-31</th>\n",
              "      <td>3.560275</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-04-30</th>\n",
              "      <td>3.569694</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-05-31</th>\n",
              "      <td>3.579056</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-30</th>\n",
              "      <td>3.588359</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-07-31</th>\n",
              "      <td>3.597606</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-08-31</th>\n",
              "      <td>3.606796</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-09-30</th>\n",
              "      <td>3.615930</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-10-31</th>\n",
              "      <td>3.625008</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-11-30</th>\n",
              "      <td>3.634030</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-12-31</th>\n",
              "      <td>3.642996</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-01-31</th>\n",
              "      <td>3.651908</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-02-28</th>\n",
              "      <td>3.660765</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-03-31</th>\n",
              "      <td>3.669567</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-04-30</th>\n",
              "      <td>3.678316</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-31</th>\n",
              "      <td>3.687011</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-06-30</th>\n",
              "      <td>3.695653</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-07-31</th>\n",
              "      <td>3.704241</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-08-31</th>\n",
              "      <td>3.712777</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-09-30</th>\n",
              "      <td>3.721260</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-10-31</th>\n",
              "      <td>3.729692</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-11-30</th>\n",
              "      <td>3.738072</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-12-31</th>\n",
              "      <td>3.746400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2026-01-31</th>\n",
              "      <td>3.754677</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2026-02-28</th>\n",
              "      <td>3.762903</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2026-03-31</th>\n",
              "      <td>3.771079</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2026-04-30</th>\n",
              "      <td>3.779205</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2026-05-31</th>\n",
              "      <td>3.787281</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2026-06-30</th>\n",
              "      <td>3.795307</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2026-07-31</th>\n",
              "      <td>3.803285</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2026-08-31</th>\n",
              "      <td>3.811213</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2026-09-30</th>\n",
              "      <td>3.819092</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2026-10-31</th>\n",
              "      <td>3.826924</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2026-11-30</th>\n",
              "      <td>3.834707</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2026-12-31</th>\n",
              "      <td>3.842442</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2027-01-31</th>\n",
              "      <td>3.850130</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2027-02-28</th>\n",
              "      <td>3.857771</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2027-03-31</th>\n",
              "      <td>3.865365</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2027-04-30</th>\n",
              "      <td>3.872912</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2027-05-31</th>\n",
              "      <td>3.880413</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2027-06-30</th>\n",
              "      <td>3.887868</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2027-07-31</th>\n",
              "      <td>3.895277</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-16309b9d-666e-4abf-99eb-2e45c1acb6dc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-16309b9d-666e-4abf-99eb-2e45c1acb6dc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-16309b9d-666e-4abf-99eb-2e45c1acb6dc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 220
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(arima.loc['1990':], '--', label='ARIMA Forecast')\n",
        "plt.plot(forecast2.loc['1990':], '--', label='LSTM Forecast')\n",
        "plt.plot(df.DGS10[:-1].loc['1990':], label='10Y Treasury Rate')\n",
        "plt.legend(fontsize=15)\n",
        "plt.yticks(fontsize=15)\n",
        "plt.xticks(fontsize=15)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 537
        },
        "id": "63c637tLC-7V",
        "outputId": "d41222cb-ff44-4ac0-aff7-59064e29a7bd"
      },
      "id": "63c637tLC-7V",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([724642., 726468., 728294., 730120., 731947., 733773., 735599.,\n",
              "        737425., 739252., 741078.]),\n",
              " <a list of 10 Text major ticklabel objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 221
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1152x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "8XR8SQbiDLQU"
      },
      "id": "8XR8SQbiDLQU",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.12"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}